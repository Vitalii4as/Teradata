"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProgrammingError = exports.NotSupportedError = exports.OperationalError = exports.IntegrityError = exports.DataError = exports.DatabaseError = exports.DriverError = exports.InterfaceError = exports.MakeError = exports.Warning = void 0;
class Warning extends Error {
    constructor(message) {
        super(message);
        const actualProto = new.target.prototype;
        Object.setPrototypeOf(this, actualProto);
    }
}
exports.Warning = Warning;
class MakeError extends Error {
    constructor(message) {
        super(message);
        const actualProto = new.target.prototype;
        Object.setPrototypeOf(this, actualProto);
    }
}
exports.MakeError = MakeError;
class InterfaceError extends Error {
    constructor(message) {
        super(message);
        const actualProto = new.target.prototype;
        Object.setPrototypeOf(this, actualProto);
    }
}
exports.InterfaceError = InterfaceError;
class DriverError extends Error {
    constructor(message) {
        super(message);
        const actualProto = new.target.prototype;
        Object.setPrototypeOf(this, actualProto);
    }
}
exports.DriverError = DriverError;
class DatabaseError extends Error {
    constructor(message) {
        super(message);
        const actualProto = new.target.prototype;
        Object.setPrototypeOf(this, actualProto);
    }
}
exports.DatabaseError = DatabaseError;
class DataError extends DatabaseError {
    constructor(message) {
        super(message);
        const actualProto = new.target.prototype;
        Object.setPrototypeOf(this, actualProto);
    }
}
exports.DataError = DataError;
class IntegrityError extends DatabaseError {
    constructor(message) {
        super(message);
        const actualProto = new.target.prototype;
        Object.setPrototypeOf(this, actualProto);
    }
}
exports.IntegrityError = IntegrityError;
class OperationalError extends DatabaseError {
    constructor(message) {
        super(message);
        const actualProto = new.target.prototype;
        Object.setPrototypeOf(this, actualProto);
    }
}
exports.OperationalError = OperationalError;
class NotSupportedError extends DatabaseError {
    constructor(message) {
        super(message);
        const actualProto = new.target.prototype;
        Object.setPrototypeOf(this, actualProto);
    }
}
exports.NotSupportedError = NotSupportedError;
class ProgrammingError extends DatabaseError {
    constructor(message) {
        super(message);
        const actualProto = new.target.prototype;
        Object.setPrototypeOf(this, actualProto);
    }
}
exports.ProgrammingError = ProgrammingError;
//# sourceMappingURL=teradata-exceptions.js.map